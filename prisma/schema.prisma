generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DEVELOPER
  USER
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum ProjectStatus {
  COMPLETED
  MAINTENANCE
  ON_HOLD
  DEVELOPMENT
  PLANNING
}

enum TicketStatus {
  RESOLVED
  ON_HOLD
  IN_DEVELOPMENT
  ASSIGNED
  UNASSIGNED
}

enum TicketType {
  BUG
  FEATURE
}

model User {
  id              String        @id @default(cuid())
  username        String        @unique
  email           String        @unique
  password        String
  firstName       String?
  lastName        String?
  jobTitle        String?
  photo           String?
  phone           String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isVerified      Boolean       @default(false)
  role            Role          @default(USER)
  sessions        Session[]
  projects        UserProject[]
  comments        Comment[]
  leadProjects    Project[]
  assignedTickets Ticket[]      @relation("assignee")
  reportedTickets Ticket[]      @relation("reporter")

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  startDate   DateTime
  dueDate     DateTime
  endDate     DateTime?
  avatar      String
  isArchived  Boolean       @default(false)
  leadId      String?
  lead        User?         @relation(fields: [leadId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  status      ProjectStatus @default(PLANNING)
  users       UserProject[]
  tickets     Ticket[]

  @@map("projects")
}

model UserProject {
  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, projectId])
  @@map("users_projects")
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resolvedAt  DateTime?
  type        TicketType   @default(BUG)
  priority    Priority     @default(LOW)
  status      TicketStatus @default(UNASSIGNED)
  assigneeId  String?
  assignee    User?        @relation("assignee", fields: [assigneeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  reporterId  String?
  reporter    User?        @relation("reporter", fields: [reporterId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments    Comment[]

  @@map("tickets")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("comments")
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@map("sessions")
}
